{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The package provides a SQLAlchemy backend for user authentication within starlette. Includes: User and Scope tables in SQLAlchemy Login Logout Password Change Password Reset Getting Started - Installation The minimum Python requirement is 3.7. This package has not been published to PyPI so you will need to install it from this repo . To do this simply run: pip install git+https://github.com/accent-starlette/starlette-auth.git@master#egg=starlette-auth Before You Begin This package assumes you have a basic starlette site operational and that you are using the database functionality within the starlette-core package.","title":"Introduction"},{"location":"#introduction","text":"The package provides a SQLAlchemy backend for user authentication within starlette. Includes: User and Scope tables in SQLAlchemy Login Logout Password Change Password Reset","title":"Introduction"},{"location":"#getting-started-installation","text":"The minimum Python requirement is 3.7. This package has not been published to PyPI so you will need to install it from this repo . To do this simply run: pip install git+https://github.com/accent-starlette/starlette-auth.git@master#egg=starlette-auth","title":"Getting Started - Installation"},{"location":"#before-you-begin","text":"This package assumes you have a basic starlette site operational and that you are using the database functionality within the starlette-core package.","title":"Before You Begin"},{"location":"configuration/","text":"Configuration There are several parts of the package that require config options. Configuration can either be stored in environment variables or set directly within the package. Templates These are the paths that are used to the templates. # the below are the defaults LOGIN_TEMPLATE = \"starlette_auth/login.html\" CHANGE_PW_TEMPLATE = \"starlette_auth/change_password.html\" RESET_PW_TEMPLATE = \"starlette_auth/password_reset.html\" RESET_PW_DONE_TEMPLATE = \"starlette_auth/password_reset_done.html\" RESET_PW_CONFIRM_TEMPLATE = \"starlette_auth/password_reset_confirm.html\" RESET_PW_COMPLETE_TEMPLATE = \"starlette_auth/password_reset_complete.html\" RESET_PW_EMAIL_SUBJECT_TEMPLATE = \"starlette_auth/password_reset_subject.txt\" RESET_PW_EMAIL_TEMPLATE = \"starlette_auth/password_reset_body.txt\" # only required for html email RESET_PW_HTML_EMAIL_TEMPLATE = \"starlette_auth/password_reset_body.html\" If you don't want to set these as environment variables you can also define them in code. from starlette_auth import config config . login_template = ... config . change_pw_template = ... config . reset_pw_template = ... config . reset_pw_done_template = ... config . reset_pw_confirm_template = ... config . reset_pw_complete_template = ... config . reset_pw_email_subject_template = ... config . reset_pw_email_template = ... config . reset_pw_html_email_template = ... app = Starlette () So that the package can load your templates you also need to specify the templates variable: import jinja2 from starlette_auth import config from starlette_core.templating import Jinja2Templates templates = Jinja2Templates ( loader = jinja2 . FileSystemLoader ( \"templates\" )) config . templates = templates app = Starlette () Routing The below are a list of redirect urls: # below are the defaults LOGIN_REDIRECT_URL = \"/\" LOGOUT_REDIRECT_URL = \"/\" CHANGE_PW_REDIRECT_URL = \"/\" or directly in python: from starlette_auth import config config . login_redirect_url = ... config . logout_redirect_url = ... config . change_pw_redirect_url = ... app = Starlette () General The below are a list of other variables: # used to make pw reset urls invalid after x seconds # default 3 days = 60 * 60 * 24 * 3 RESET_PW_TIMEOUT = \"86400\" # used to create pw reset urls # default = \"\" SECRET_KEY = \"some-secret-key\" or directly in python: from starlette_auth import config config . reset_pw_timeout = ... config . secret_key = ... app = Starlette ()","title":"Configuration"},{"location":"configuration/#configuration","text":"There are several parts of the package that require config options. Configuration can either be stored in environment variables or set directly within the package.","title":"Configuration"},{"location":"configuration/#templates","text":"These are the paths that are used to the templates. # the below are the defaults LOGIN_TEMPLATE = \"starlette_auth/login.html\" CHANGE_PW_TEMPLATE = \"starlette_auth/change_password.html\" RESET_PW_TEMPLATE = \"starlette_auth/password_reset.html\" RESET_PW_DONE_TEMPLATE = \"starlette_auth/password_reset_done.html\" RESET_PW_CONFIRM_TEMPLATE = \"starlette_auth/password_reset_confirm.html\" RESET_PW_COMPLETE_TEMPLATE = \"starlette_auth/password_reset_complete.html\" RESET_PW_EMAIL_SUBJECT_TEMPLATE = \"starlette_auth/password_reset_subject.txt\" RESET_PW_EMAIL_TEMPLATE = \"starlette_auth/password_reset_body.txt\" # only required for html email RESET_PW_HTML_EMAIL_TEMPLATE = \"starlette_auth/password_reset_body.html\" If you don't want to set these as environment variables you can also define them in code. from starlette_auth import config config . login_template = ... config . change_pw_template = ... config . reset_pw_template = ... config . reset_pw_done_template = ... config . reset_pw_confirm_template = ... config . reset_pw_complete_template = ... config . reset_pw_email_subject_template = ... config . reset_pw_email_template = ... config . reset_pw_html_email_template = ... app = Starlette () So that the package can load your templates you also need to specify the templates variable: import jinja2 from starlette_auth import config from starlette_core.templating import Jinja2Templates templates = Jinja2Templates ( loader = jinja2 . FileSystemLoader ( \"templates\" )) config . templates = templates app = Starlette ()","title":"Templates"},{"location":"configuration/#routing","text":"The below are a list of redirect urls: # below are the defaults LOGIN_REDIRECT_URL = \"/\" LOGOUT_REDIRECT_URL = \"/\" CHANGE_PW_REDIRECT_URL = \"/\" or directly in python: from starlette_auth import config config . login_redirect_url = ... config . logout_redirect_url = ... config . change_pw_redirect_url = ... app = Starlette ()","title":"Routing"},{"location":"configuration/#general","text":"The below are a list of other variables: # used to make pw reset urls invalid after x seconds # default 3 days = 60 * 60 * 24 * 3 RESET_PW_TIMEOUT = \"86400\" # used to create pw reset urls # default = \"\" SECRET_KEY = \"some-secret-key\" or directly in python: from starlette_auth import config config . reset_pw_timeout = ... config . secret_key = ... app = Starlette ()","title":"General"},{"location":"setup/","text":"Setup Tables Firstly import both the User and Scope tables into your project. Please refer to the starlette-core documentation for more information. from starlette_core.database import Database , DatabaseURL , metadata from app.settings import DATABASE_URL url = DatabaseURL ( \"sqlite:///./db.sqlite3\" ) # set engine config options engine_kwargs = {} # setup the database database = Database ( DATABASE_URL , engine_kwargs = engine_kwargs ) # once the db is initialised you can import any project # and external tables into this file. # the metadata imported above will be the complete metadata # used for your db for the likes of alembic migrations. from my_project import tables from starlette_auth import tables Middleware Add both AuthenticationMiddleware and SessionMiddleware : from starlette.applications import Starlette from starlette.middleware import Middleware from starlette.middleware.authentication import AuthenticationMiddleware from starlette_auth import ModelAuthBackend from starlette_auth.middleware import SessionMiddleware middleware = [ ... Middleware ( SessionMiddleware , secret_key = \"some-secret-key\" ), Middleware ( AuthenticationMiddleware , backend = ModelAuthBackend ()), ] app = Starlette ( middleware = middleware ) Routing You will need to mount the urls as follows: from starlette.applications import Starlette from starlette.routing import Mount from starlette_auth import app as auth_app routes = [ ... Mount ( \"/auth\" , app = auth_app , name = \"auth\" ), ] app = Starlette ( routes = routes ) This will also allow you to reference the urls in templates such as auth:login etc.","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#tables","text":"Firstly import both the User and Scope tables into your project. Please refer to the starlette-core documentation for more information. from starlette_core.database import Database , DatabaseURL , metadata from app.settings import DATABASE_URL url = DatabaseURL ( \"sqlite:///./db.sqlite3\" ) # set engine config options engine_kwargs = {} # setup the database database = Database ( DATABASE_URL , engine_kwargs = engine_kwargs ) # once the db is initialised you can import any project # and external tables into this file. # the metadata imported above will be the complete metadata # used for your db for the likes of alembic migrations. from my_project import tables from starlette_auth import tables","title":"Tables"},{"location":"setup/#middleware","text":"Add both AuthenticationMiddleware and SessionMiddleware : from starlette.applications import Starlette from starlette.middleware import Middleware from starlette.middleware.authentication import AuthenticationMiddleware from starlette_auth import ModelAuthBackend from starlette_auth.middleware import SessionMiddleware middleware = [ ... Middleware ( SessionMiddleware , secret_key = \"some-secret-key\" ), Middleware ( AuthenticationMiddleware , backend = ModelAuthBackend ()), ] app = Starlette ( middleware = middleware )","title":"Middleware"},{"location":"setup/#routing","text":"You will need to mount the urls as follows: from starlette.applications import Starlette from starlette.routing import Mount from starlette_auth import app as auth_app routes = [ ... Mount ( \"/auth\" , app = auth_app , name = \"auth\" ), ] app = Starlette ( routes = routes ) This will also allow you to reference the urls in templates such as auth:login etc.","title":"Routing"},{"location":"templating/","text":"Templating We do not include any templates that are required by the endpoints or email sending. You will need to create the following templates in your project and set a config variable in starlette-auth to load these: import jinja2 from starlette_auth import config from starlette_core.templating import Jinja2Templates templates = Jinja2Templates ( loader = jinja2 . FileSystemLoader ( \"templates\" )) config . templates = templates app = Starlette () Example Templates The below by default are where this package will try to load templates from. HTML starlette_auth/login.html < body > < p > Please login to get started. </ p > {% for field in form %} {{ field.label }} {{ field }} {% if field.errors %} < cite > {{ field.errors|join(' ') }} </ cite > {% endif %} {% endfor %} </ body > starlette_auth/change_password.html < body > < p > Please use the below form to change your password. </ p > {% for field in form %} {{ field.label }} {{ field }} {% if field.errors %} < cite > {{ field.errors|join(' ') }} </ cite > {% endif %} {% endfor %} </ body > starlette_auth/password_reset.html < body > < p > Please use the below form by providing a valid email address to reset your password. </ p > {% for field in form %} {{ field.label }} {{ field }} {% if field.errors %} < cite > {{ field.errors|join(' ') }} </ cite > {% endif %} {% endfor %} </ body > starlette_auth/password_reset_done.html < body > < p > If you have provided a registered email address, you will receive an email with further instructions shortly. </ p > </ body > starlette_auth/password_reset_confirm.html < body > < p > Please use the below to enter your new password. </ p > {% for field in form %} {{ field.label }} {{ field }} {% if field.errors %} < cite > {{ field.errors|join(' ') }} </ cite > {% endif %} {% endfor %} </ body > starlette_auth/password_reset_complete.html < body > < p > Your password has been changed you can now < a href = \"{{ url_for('auth:login') }}\" > login </ a > . </ p > </ body > Email starlette_auth/password_reset_subject.txt Password reset for {{ request.url.hostname }} starlette_auth/password_reset_body.txt You're receiving this email because you requested a password reset for your user account at {{ request.url.hostname }}. Please go to the following page and choose a new password: {{ url_for(\"auth:password_reset_confirm\", uidb64=uid, token=token) }} Thanks for using our site!","title":"Templating"},{"location":"templating/#templating","text":"We do not include any templates that are required by the endpoints or email sending. You will need to create the following templates in your project and set a config variable in starlette-auth to load these: import jinja2 from starlette_auth import config from starlette_core.templating import Jinja2Templates templates = Jinja2Templates ( loader = jinja2 . FileSystemLoader ( \"templates\" )) config . templates = templates app = Starlette ()","title":"Templating"},{"location":"templating/#example-templates","text":"The below by default are where this package will try to load templates from.","title":"Example Templates"},{"location":"templating/#html","text":"starlette_auth/login.html < body > < p > Please login to get started. </ p > {% for field in form %} {{ field.label }} {{ field }} {% if field.errors %} < cite > {{ field.errors|join(' ') }} </ cite > {% endif %} {% endfor %} </ body > starlette_auth/change_password.html < body > < p > Please use the below form to change your password. </ p > {% for field in form %} {{ field.label }} {{ field }} {% if field.errors %} < cite > {{ field.errors|join(' ') }} </ cite > {% endif %} {% endfor %} </ body > starlette_auth/password_reset.html < body > < p > Please use the below form by providing a valid email address to reset your password. </ p > {% for field in form %} {{ field.label }} {{ field }} {% if field.errors %} < cite > {{ field.errors|join(' ') }} </ cite > {% endif %} {% endfor %} </ body > starlette_auth/password_reset_done.html < body > < p > If you have provided a registered email address, you will receive an email with further instructions shortly. </ p > </ body > starlette_auth/password_reset_confirm.html < body > < p > Please use the below to enter your new password. </ p > {% for field in form %} {{ field.label }} {{ field }} {% if field.errors %} < cite > {{ field.errors|join(' ') }} </ cite > {% endif %} {% endfor %} </ body > starlette_auth/password_reset_complete.html < body > < p > Your password has been changed you can now < a href = \"{{ url_for('auth:login') }}\" > login </ a > . </ p > </ body >","title":"HTML"},{"location":"templating/#email","text":"starlette_auth/password_reset_subject.txt Password reset for {{ request.url.hostname }} starlette_auth/password_reset_body.txt You're receiving this email because you requested a password reset for your user account at {{ request.url.hostname }}. Please go to the following page and choose a new password: {{ url_for(\"auth:password_reset_confirm\", uidb64=uid, token=token) }} Thanks for using our site!","title":"Email"},{"location":"user/","text":"The User Class The User class is defined as follows: import sqlalchemy as sa from sqlalchemy import orm from sqlalchemy_utils import EmailType from starlette_core.database import Base class User ( Base ): email = sa . Column ( EmailType , nullable = False , index = True , unique = True ) password = sa . Column ( sa . String ( 255 )) first_name = sa . Column ( sa . String ( 120 )) last_name = sa . Column ( sa . String ( 120 )) is_active = sa . Column ( sa . Boolean , nullable = False , default = True ) last_login = sa . Column ( sa . DateTime , nullable = True ) scopes = orm . relationship ( \"Scope\" , secondary = user_scopes ) def __str__ ( self ): return self . email @property def is_authenticated ( self ) -> bool : return self . is_active @property def display_name ( self ) -> str : return f \" { self . first_name } { self . last_name } \" def set_password ( self , password ) -> None : \"\"\" hashes and sets a users password, will require saving. eg: user.set_password(\"password\") \"\"\" def check_password ( self , password ) -> bool : \"\"\" hashes and checks the given password is the same as the stored one. eg: user.check_password(\"password\") \"\"\"","title":"The User Class"},{"location":"user/#the-user-class","text":"The User class is defined as follows: import sqlalchemy as sa from sqlalchemy import orm from sqlalchemy_utils import EmailType from starlette_core.database import Base class User ( Base ): email = sa . Column ( EmailType , nullable = False , index = True , unique = True ) password = sa . Column ( sa . String ( 255 )) first_name = sa . Column ( sa . String ( 120 )) last_name = sa . Column ( sa . String ( 120 )) is_active = sa . Column ( sa . Boolean , nullable = False , default = True ) last_login = sa . Column ( sa . DateTime , nullable = True ) scopes = orm . relationship ( \"Scope\" , secondary = user_scopes ) def __str__ ( self ): return self . email @property def is_authenticated ( self ) -> bool : return self . is_active @property def display_name ( self ) -> str : return f \" { self . first_name } { self . last_name } \" def set_password ( self , password ) -> None : \"\"\" hashes and sets a users password, will require saving. eg: user.set_password(\"password\") \"\"\" def check_password ( self , password ) -> bool : \"\"\" hashes and checks the given password is the same as the stored one. eg: user.check_password(\"password\") \"\"\"","title":"The User Class"}]}